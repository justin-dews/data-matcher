#!/usr/bin/env node

// üî¨ Test nuclear cache reset results
const { createClient } = require('@supabase/supabase-js')

require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

async function testNuclearReset() {
    console.log('üî¨ Testing nuclear cache reset results...')
    
    // Create frontend-identical client
    const client = createClient(supabaseUrl, anonKey)
    
    console.log('‚è≥ Waiting 60 seconds for complete PostgREST cache refresh...')
    await new Promise(resolve => setTimeout(resolve, 60000))
    
    try {
        console.log('üß™ Testing exact frontend RPC call...')
        
        // Call with EXACT same parameters as frontend
        const { data, error } = await client.rpc('hybrid_product_match_tiered', {
            query_text: 'power probe',
            limit_count: 5, 
            threshold: 0.2
        })
        
        if (error) {
            console.log('‚ùå STILL FAILING:')
            console.log(`   Code: ${error.code}`)
            console.log(`   Message: ${error.message}`)
            console.log(`   Details: ${error.details}`)
            console.log(`   Hint: ${error.hint}`)
            
            if (error.code === 'PGRST202') {
                console.log('\nüîç PGRST202 Analysis:')
                console.log('   This means PostgREST cannot find the function in its schema cache')
                console.log('   The function exists in PostgreSQL but PostgREST doesnt see it')
                
                if (error.hint) {
                    console.log(`   PostgREST suggests: ${error.hint}`)
                    
                    if (error.hint.includes('limit_count, query_text, threshold')) {
                        console.log('   ‚ö†Ô∏è  PostgREST thinks parameters are in wrong order!')
                        console.log('   This suggests cached metadata is stale')
                    }
                }
            }
            
            return false
        }
        
        console.log(`‚úÖ SUCCESS! Found ${data ? data.length : 0} matches`)
        
        if (data && data.length > 0) {
            const match = data[0]
            console.log('üìä Sample result:')
            console.log(`   SKU: ${match.sku}`)
            console.log(`   Name: ${match.name}`)
            console.log(`   Score: ${match.final_score}`)
            console.log(`   Via: ${match.matched_via}`)
            console.log(`   Training: ${match.is_training_match}`)
            
            // Verify all expected fields
            const requiredFields = ['product_id', 'sku', 'name', 'manufacturer', 'category', 
                                  'vector_score', 'trigram_score', 'fuzzy_score', 'alias_score',
                                  'final_score', 'matched_via', 'reasoning', 'is_training_match']
            
            const missingFields = requiredFields.filter(field => !(field in match))
            
            if (missingFields.length === 0) {
                console.log('‚úÖ All TypeScript fields present')
            } else {
                console.log(`‚ùå Missing fields: ${missingFields.join(', ')}`)
            }
        }
        
        return true
        
    } catch (err) {
        console.log('üö® Exception during test:', err.message)
        return false
    }
}

async function main() {
    console.log('üöÄ NUCLEAR CACHE RESET TEST')
    console.log('=' .repeat(50))
    console.log('This test validates that the PostgREST PGRST202 error is resolved')
    console.log('')
    
    const success = await testNuclearReset()
    
    console.log('\n' + '='.repeat(50))
    console.log('üìä NUCLEAR RESET TEST RESULTS')
    console.log('=' .repeat(50))
    
    if (success) {
        console.log('üéâ NUCLEAR RESET SUCCESSFUL!')
        console.log('‚úÖ Function is accessible via frontend client')
        console.log('‚úÖ PostgREST schema cache is working correctly')
        console.log('‚úÖ All TypeScript fields are present')
        console.log('‚úÖ The matches page should now load without 404 errors')
        console.log('')
        console.log('üöÄ NEXT STEP: Test your /dashboard/matches page')
    } else {
        console.log('‚ùå NUCLEAR RESET FAILED')
        console.log('The PostgREST schema cache issue persists')
        console.log('')
        console.log('üîß POSSIBLE SOLUTIONS:')
        console.log('1. Wait additional time (up to 5 minutes) for cache propagation')
        console.log('2. Restart your local development server (npm run dev)')
        console.log('3. Check Supabase dashboard for any function deployment errors')
        console.log('4. Verify NUCLEAR_CACHE_RESET.sql ran without errors')
        console.log('')
        console.log('This is likely a Supabase infrastructure caching issue')
    }
}

main()